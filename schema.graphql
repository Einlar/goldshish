"\nscalar JSON\nscalar Date\n\n# see https://docs.hasura.io/1.0/graphql/manual/queries/query-filters.html\n\ninput String_Selector {\n  _eq: String\n  #_gt: String\n  #_gte: String\n  #_ilike: String\n  _in: [String!]\n  _is_null: Boolean\n  _like: String\n  #_lt: String\n  #_lte: String\n  #_neq: String\n  #_nilike: String\n  #_nin: [String!]\n  #_nlike: String\n  #_nsimilar: String\n  #_similar: String\n}\n\ninput String_Array_Selector {\n  _in: [String!]\n  _contains: String\n  # _contains_all: [String_Selector]\n}\n\ninput Int_Selector {\n  _eq: Int\n  _gt: Int\n  _gte: Int\n  _in: [Int!]\n  #_is_null: Boolean\n  _lt: Int\n  _lte: Int\n  #_neq: Int\n  #_nin: [Int!]\n}\n\ninput Int_Array_Selector {\n  contains: Int_Selector\n  # contains_all: [Int_Selector]\n}\n\ninput Float_Selector {\n  _eq: Float\n  _gt: Float\n  _gte: Float\n  _in: [Float!]\n  #_is_null: Boolean\n  _lt: Float\n  _lte: Float\n  #_neq: Float\n  #_nin: [Float!]\n}\n\ninput Float_Array_Selector {\n  contains: Float_Selector\n  # contains_all: [Float_Selector]\n}\n\ninput Boolean_Selector {\n  _eq: Boolean\n  #_neq: Boolean\n}\n\ninput Boolean_Array_Selector {\n  contains: Boolean_Selector\n  # contains_all: [Boolean_Selector]\n}\n\ninput Date_Selector {\n  _eq: Date\n  _gt: Date\n  _gte: Date\n  _in: [Date!]\n  #_is_null: Boolean\n  _lt: Date\n  _lte: Date\n  #_neq: Date\n  #_nin: [Date!]\n}\n\ninput Date_Array_Selector {\n  contains: Date_Selector\n  # contains_all: [Date_Selector]\n}\n\n# column ordering options\nenum SortOptions {\n  asc\n  desc\n}\n\ninput OptionsInput {\n  # Whether to enable caching for this query\n  enableCache: Boolean\n  # For single document queries, return null instead of throwing MissingDocumentError\n  allowNull: Boolean\n}\n\ntype Site {\n  title: String\n  url: String\n  logoUrl: String\n  sourceVersion: String\n}\ntype IntlValue {\n  locale: String\n  value: String\n}\ninput IntlValueInput{\n  locale: String\n  value: String\n}\ndirective @intl on FIELD_DEFINITION\n\n  input AuthPasswordInput {\n    email: String\n    password: String\n  }\n  type AuthResult {\n    token: String\n    userId: String\n  }\n  type LogoutResult {\n    userId: String\n  }\n\n  input SignupInput {\n    email: String\n    password: String\n  }\n  type SignupResult {\n    userId: String\n  }\n\n  input SetPasswordInput {\n    newPassword: String\n  }\n\n  #type SetPasswordResult # Will auth user again so we reuse AuthResult atm\n\n  input ResetPasswordInput {\n    token: String\n    newPassword: String\n  }\n  type ResetPasswordResult {\n    userId: String\n  }\n\n  input VerifyEmailInput {\n    token: String\n  }\n  type VerifyEmailResult {\n    userId: String\n  }\n\n  input AuthEmailInput {\n    email: String\n  }\n\n\ntype Step {\n  step: Int\n  completed: Boolean\n  progress: [Boolean]\n  title: String\n}\n\n# A user object\ntype User {\n  _id: String \n  username: String \n  emails: [JSON] \n  createdAt: Date \n  isAdmin: Boolean \n  locale: String \n  profile: JSON \n  services: JSON \n  displayName: String \n  email: String \n  emailHash: String \n  avatarUrl: String \n  slug: String \n  groups: [String] \n  pageUrl: String \n  pagePath: String \n  editUrl: String \n  createdAtFormatted(format: String = \"YYYY/MM/DD\"): String \n}\n\n\ninput DeleteUserInput{\n  filter: UserFilterInput\n  id: String\n  # An identifier to name the mutation's execution context\n  contextName: String\n}\n\ninput SingleUserInput {\n  # filtering\n  filter: UserFilterInput\n  sort: UserSortInput\n  search: String\n  id: String\n\n  # backwards-compatibility\n  \"Deprecated (use 'filter/id' fields instead).\"\n  selector: UserSelectorUniqueInput\n\n  # options (backwards-compatibility)\n  # Whether to enable caching for this query\n  enableCache: Boolean\n  # Return null instead of throwing MissingDocumentError\n  allowNull: Boolean\n  # An identifier to name the query's execution context\n  contextName: String\n}\n\ninput MultiUserInput {\n\n  # filtering\n  filter: UserFilterInput\n  sort: UserSortInput\n  search: String\n  offset: Int\n  limit: Int\n\n  # backwards-compatibility\n  # A JSON object that contains the query terms used to fetch data\n  \"Deprecated (use 'filter/id' fields instead).\"\n  terms: JSON\n\n  # options (backwards-compatibility)\n  # Whether to enable caching for this query\n  enableCache: Boolean\n  # Whether to calculate totalCount for this query\n  enableTotal: Boolean\n  # An identifier to name the query's execution context\n  contextName: String\n  \n}\n\ntype SingleUserOutput{\n  result: User\n}\n\ntype  MultiUserOutput{\n  results: [User]\n  totalCount: Int\n}\n\ntype UserMutationOutput{\n  data: User\n}\n\ninput CreateUserInput {\n  data: CreateUserDataInput!\n  # An identifier to name the mutation's execution context\n  contextName: String\n}\n\ninput CreateUserDataInput {\n  username: String \n  isAdmin: Boolean \n  locale: String \n  profile: JSON \n  displayName: String \n  email: String \n  groups: [String] \n}\n\ninput UpdateUserInput{\n  filter: UserFilterInput\n  id: String\n  data: UpdateUserDataInput!\n  # An identifier to name the mutation's execution context\n  contextName: String\n}\n\ninput UpsertUserInput{\n  filter: UserFilterInput\n  id: String\n  data: UpdateUserDataInput!\n  # An identifier to name the mutation's execution context\n  contextName: String\n}\n\ninput UpdateUserDataInput {\n  username: String \n  isAdmin: Boolean \n  locale: String \n  displayName: String \n  email: String \n  groups: [String] \n}\n\ninput UserFilterInput {\n  _and: [UserFilterInput]\n  _not: UserFilterInput\n  _or: [UserFilterInput]\n\n\n  _id: String_Selector\n  username: String_Selector\n\n  createdAt: Date_Selector\n  isAdmin: Boolean_Selector\n  locale: String_Selector\n\n  displayName: String_Selector\n  email: String_Selector\n  emailHash: String_Selector\n  avatarUrl: String_Selector\n  slug: String_Selector\n  groups: String_Array_Selector\n  pageUrl: String_Selector\n  pagePath: String_Selector\n  editUrl: String_Selector\n}\n\ninput UserSortInput {\n  _id: SortOptions\n  username: SortOptions\n  emails: SortOptions\n  createdAt: SortOptions\n  isAdmin: SortOptions\n  locale: SortOptions\n  services: SortOptions\n  displayName: SortOptions\n  email: SortOptions\n  emailHash: SortOptions\n  avatarUrl: SortOptions\n  slug: SortOptions\n  groups: SortOptions\n  pageUrl: SortOptions\n  pagePath: SortOptions\n  editUrl: SortOptions\n}\n\ninput UserSelectorInput {\n  _and: [UserSelectorInput]\n  _or: [UserSelectorInput]\n\n}\n\ninput UserSelectorUniqueInput {\n  _id: String\n  documentId: String # OpenCRUD backwards compatibility\n  slug: String\n\n}\n\n\n\n\ntype Query {\n  siteData: Site\n  \n  currentUser: User\n  \n  schemaContents: String\n  \n  moviesCount: Int\n  \n  steps: [Step]\n  \n  # A single User document fetched by ID or slug\n  user(input: SingleUserInput!): SingleUserOutput\n  \n  # A list of User documents matching a set of query terms\n  users(input: MultiUserInput):  MultiUserOutput\n  \n}\n  \n\ntype Mutation {\n  authenticateWithPassword(input: AuthPasswordInput): AuthResult\n\n  logout: LogoutResult\n\n  signup(input: SignupInput): SignupResult\n\n  setPassword(input: SetPasswordInput): AuthResult\n\n  sendResetPasswordEmail(input: AuthEmailInput): Boolean\n\n  resetPassword(input: ResetPasswordInput): ResetPasswordResult\n\n  sendVerificationEmail(input: AuthEmailInput): Boolean\n\n  verifyEmail(input: VerifyEmailInput): VerifyEmailResult\n\n  # Mutation for creating new User documents\n  createUser(\n  input: CreateUserInput,\n  \"Deprecated (use 'input' field instead).\"\n  data: CreateUserDataInput\n) : UserMutationOutput\n\n  # Mutation for updating a User document\n  updateUser(\n  input: UpdateUserInput,\n  \"Deprecated (use 'input' field instead).\"\n  selector: UserSelectorUniqueInput,\n  \"Deprecated (use 'input' field instead).\"\n  data: UpdateUserDataInput \n) : UserMutationOutput\n\n  # Mutation for upserting a User document\n  upsertUser(\n  input: UpsertUserInput,\n  \"Deprecated (use 'input' field instead).\"\n  selector: UserSelectorUniqueInput,\n  \"Deprecated (use 'input' field instead).\"\n  data: UpdateUserDataInput\n) : UserMutationOutput\n\n  # Mutation for deleting a User document\n  deleteUser(\n  input: DeleteUserInput,\n  \"Deprecated (use 'input' field instead).\"\n  selector: UserSelectorUniqueInput\n) : UserMutationOutput\n\n}\n\n\n"