
scalar JSON
scalar Date

# see https://docs.hasura.io/1.0/graphql/manual/queries/query-filters.html

input String_Selector {
  _eq: String
  #_gt: String
  #_gte: String
  #_ilike: String
  _in: [String!]
  #_is_null: Boolean
  #_like: String
  #_lt: String
  #_lte: String
  #_neq: String
  #_nilike: String
  #_nin: [String!]
  #_nlike: String
  #_nsimilar: String
  #_similar: String
}

input String_Array_Selector {
  contains: String_Selector
  # contains_all: [String_Selector]
}

input Int_Selector {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  #_is_null: Boolean
  _lt: Int
  _lte: Int
  #_neq: Int
  #_nin: [Int!]
}

input Int_Array_Selector {
  contains: Int_Selector
  # contains_all: [Int_Selector]
}

input Float_Selector {
  _eq: Float
  _gt: Float
  _gte: Float
  _in: [Float!]
  #_is_null: Boolean
  _lt: Float
  _lte: Float
  #_neq: Float
  #_nin: [Float!]
}

input Float_Array_Selector {
  contains: Float_Selector
  # contains_all: [Float_Selector]
}

input Boolean_Selector {
  _eq: Boolean
  #_neq: Boolean
}

input Boolean_Array_Selector {
  contains: Boolean_Selector
  # contains_all: [Boolean_Selector]
}

input Date_Selector {
  _eq: Date
  _gt: Date
  _gte: Date
  _in: [Date!]
  #_is_null: Boolean
  _lt: Date
  _lte: Date
  #_neq: Date
  #_nin: [Date!]
}

input Date_Array_Selector {
  contains: Date_Selector
  # contains_all: [Date_Selector]
}

# column ordering options
enum SortOptions {
  asc
  desc
}

type Site {
  title: String
  url: String
  logoUrl: String
  sourceVersion: String
}
type IntlValue {
  locale: String
  value: String
}
input IntlValueInput{
  locale: String
  value: String
}
directive @intl on FIELD_DEFINITION
union Voteable = Post | Comment

# A user object
type User {
  _id: String 
  username: String 
  emails: [JSON] 
  createdAt: Date 
  isAdmin: Boolean 
  locale: String 
  profile: JSON 
  services: JSON 
  displayName: String 
  email: String 
  emailHash: String 
  avatarUrl: String 
  slug: String 
  twitterUsername: String 
  groups: [String] 
  pageUrl: String 
  pagePath: String 
  editUrl: String 
  votes(collectionName: String): [Vote] 
  postCount: Float 
  posts(limit: Int = 5): [Post] 
  bio: String 
  htmlBio: String 
  website: String 
  commentCount: Float 
  notifications_users: Boolean 
  notifications_posts: Boolean 
  notifications_comments: Boolean 
  notifications_replies: Boolean 
}


input DeleteUserInput{
  filter: UserFilterInput
  selector: UserSelectorUniqueInput
}

input SingleUserInput {
  # filtering
  filter: UserFilterInput
  orderBy: UserSortInput
  search: String
  _id: String

  # backwards-compatibility
  selector: UserSelectorUniqueInput

  # options
  # Whether to enable caching for this query
  enableCache: Boolean
  # Return null instead of throwing MissingDocumentError
  allowNull: Boolean
}

input MultiUserInput {

  # filtering
  filter: UserFilterInput
  sort: UserSortInput
  search: String
  offset: Int
  limit: Int

  # backwards-compatibility
  # A JSON object that contains the query terms used to fetch data
  terms: JSON

  # options
  # Whether to enable caching for this query
  enableCache: Boolean
  # Whether to calculate totalCount for this query
  enableTotal: Boolean
  
}

input MutationUserInput {
  # filtering
  filter: UserFilterInput
  sort: UserSortInput
  search: String
  _id: String

  # backwards-compatibility
  selector: UserSelectorUniqueInput

}

type SingleUserOutput{
  result: User
}

type MultiUserOutput{
  results: [User]
  totalCount: Int
}

type UserOutput{
  data: User
}

input CreateUserInput {
  data: CreateUserDataInput!
}

input CreateUserDataInput {
  username: String 
  isAdmin: Boolean 
  locale: String 
  profile: JSON 
  displayName: String 
  email: String 
  twitterUsername: String 
  groups: [String] 
  bio: String 
  website: String 
  notifications_users: Boolean 
  notifications_posts: Boolean 
  notifications_comments: Boolean 
  notifications_replies: Boolean 
}

input UpdateUserInput{
  filter: UserFilterInput
  selector: UserSelectorUniqueInput
  data: UpdateUserDataInput!
}

input UpsertUserInput{
  filter: UserFilterInput
  selector: UserSelectorUniqueInput
  data: UpdateUserDataInput!
}

input UpdateUserDataInput {
  username: String 
  isAdmin: Boolean 
  locale: String 
  displayName: String 
  email: String 
  twitterUsername: String 
  groups: [String] 
  bio: String 
  website: String 
  notifications_users: Boolean 
  notifications_posts: Boolean 
  notifications_comments: Boolean 
  notifications_replies: Boolean 
}

input UserFilterInput {
  _and: [UserFilterInput]
  _not: UserFilterInput
  _or: [UserFilterInput]


  _id: String_Selector
  username: String_Selector

  createdAt: Date_Selector
  isAdmin: Boolean_Selector
  locale: String_Selector

  displayName: String_Selector
  email: String_Selector
  emailHash: String_Selector
  avatarUrl: String_Selector
  slug: String_Selector
  twitterUsername: String_Selector

  pageUrl: String_Selector
  pagePath: String_Selector
  editUrl: String_Selector

  postCount: Float_Selector

  bio: String_Selector
  htmlBio: String_Selector
  website: String_Selector
  commentCount: Float_Selector
  notifications_users: Boolean_Selector
  notifications_posts: Boolean_Selector
  notifications_comments: Boolean_Selector
  notifications_replies: Boolean_Selector
}

input UserSortInput {
  _id: SortOptions
  username: SortOptions
  emails: SortOptions
  createdAt: SortOptions
  isAdmin: SortOptions
  locale: SortOptions
  services: SortOptions
  displayName: SortOptions
  email: SortOptions
  emailHash: SortOptions
  avatarUrl: SortOptions
  slug: SortOptions
  twitterUsername: SortOptions
  groups: SortOptions
  pageUrl: SortOptions
  pagePath: SortOptions
  editUrl: SortOptions
  votes: SortOptions
  postCount: SortOptions
  posts: SortOptions
  bio: SortOptions
  htmlBio: SortOptions
  website: SortOptions
  commentCount: SortOptions
  notifications_users: SortOptions
  notifications_posts: SortOptions
  notifications_comments: SortOptions
  notifications_replies: SortOptions
}

input UserSelectorInput {
  _and: [UserSelectorInput]
  _or: [UserSelectorInput]

}

input UserSelectorUniqueInput {
  _id: String
  documentId: String # OpenCRUD backwards compatibility
  slug: String

}


# Type for Emails
type Email {
  name: String 
  template: String 
  subject: String 
  path: String 
}


input DeleteEmailInput{
  filter: EmailFilterInput
  selector: EmailSelectorUniqueInput
}

input SingleEmailInput {
  # filtering
  filter: EmailFilterInput
  orderBy: EmailSortInput
  search: String
  _id: String

  # backwards-compatibility
  selector: EmailSelectorUniqueInput

  # options
  # Whether to enable caching for this query
  enableCache: Boolean
  # Return null instead of throwing MissingDocumentError
  allowNull: Boolean
}

input MultiEmailInput {

  # filtering
  filter: EmailFilterInput
  sort: EmailSortInput
  search: String
  offset: Int
  limit: Int

  # backwards-compatibility
  # A JSON object that contains the query terms used to fetch data
  terms: JSON

  # options
  # Whether to enable caching for this query
  enableCache: Boolean
  # Whether to calculate totalCount for this query
  enableTotal: Boolean
  
}

input MutationEmailInput {
  # filtering
  filter: EmailFilterInput
  sort: EmailSortInput
  search: String
  _id: String

  # backwards-compatibility
  selector: EmailSelectorUniqueInput

}

type SingleEmailOutput{
  result: Email
}

type MultiEmailOutput{
  results: [Email]
  totalCount: Int
}

type EmailOutput{
  data: Email
}

input EmailFilterInput {
  _and: [EmailFilterInput]
  _not: EmailFilterInput
  _or: [EmailFilterInput]


  name: String_Selector
  template: String_Selector
  subject: String_Selector
  path: String_Selector
}

input EmailSortInput {
  name: SortOptions
  template: SortOptions
  subject: SortOptions
  path: SortOptions
}

input EmailSelectorInput {
  _and: [EmailSelectorInput]
  _or: [EmailSelectorInput]

}

input EmailSelectorUniqueInput {
  _id: String
  documentId: String # OpenCRUD backwards compatibility
  slug: String

}


# Type for Settings
type Setting {
  name: String 
  value: JSON 
  defaultValue: JSON 
  isPublic: Boolean 
  description: String 
}


input DeleteSettingInput{
  filter: SettingFilterInput
  selector: SettingSelectorUniqueInput
}

input SingleSettingInput {
  # filtering
  filter: SettingFilterInput
  orderBy: SettingSortInput
  search: String
  _id: String

  # backwards-compatibility
  selector: SettingSelectorUniqueInput

  # options
  # Whether to enable caching for this query
  enableCache: Boolean
  # Return null instead of throwing MissingDocumentError
  allowNull: Boolean
}

input MultiSettingInput {

  # filtering
  filter: SettingFilterInput
  sort: SettingSortInput
  search: String
  offset: Int
  limit: Int

  # backwards-compatibility
  # A JSON object that contains the query terms used to fetch data
  terms: JSON

  # options
  # Whether to enable caching for this query
  enableCache: Boolean
  # Whether to calculate totalCount for this query
  enableTotal: Boolean
  
}

input MutationSettingInput {
  # filtering
  filter: SettingFilterInput
  sort: SettingSortInput
  search: String
  _id: String

  # backwards-compatibility
  selector: SettingSelectorUniqueInput

}

type SingleSettingOutput{
  result: Setting
}

type MultiSettingOutput{
  results: [Setting]
  totalCount: Int
}

type SettingOutput{
  data: Setting
}

input SettingFilterInput {
  _and: [SettingFilterInput]
  _not: SettingFilterInput
  _or: [SettingFilterInput]


  name: String_Selector


  isPublic: Boolean_Selector
  description: String_Selector
}

input SettingSortInput {
  name: SortOptions
  value: SortOptions
  defaultValue: SortOptions
  isPublic: SortOptions
  description: SortOptions
}

input SettingSelectorInput {
  _and: [SettingSelectorInput]
  _or: [SettingSelectorInput]

}

input SettingSelectorUniqueInput {
  _id: String
  documentId: String # OpenCRUD backwards compatibility
  slug: String

}


# Type for Callbacks
type Callback {
  name: String 
  iterator: JSON 
  properties: [JSON] 
  runs: String 
  newSyntax: Boolean 
  returns: String 
  description: String 
  hooks: [String] 
}


input DeleteCallbackInput{
  filter: CallbackFilterInput
  selector: CallbackSelectorUniqueInput
}

input SingleCallbackInput {
  # filtering
  filter: CallbackFilterInput
  orderBy: CallbackSortInput
  search: String
  _id: String

  # backwards-compatibility
  selector: CallbackSelectorUniqueInput

  # options
  # Whether to enable caching for this query
  enableCache: Boolean
  # Return null instead of throwing MissingDocumentError
  allowNull: Boolean
}

input MultiCallbackInput {

  # filtering
  filter: CallbackFilterInput
  sort: CallbackSortInput
  search: String
  offset: Int
  limit: Int

  # backwards-compatibility
  # A JSON object that contains the query terms used to fetch data
  terms: JSON

  # options
  # Whether to enable caching for this query
  enableCache: Boolean
  # Whether to calculate totalCount for this query
  enableTotal: Boolean
  
}

input MutationCallbackInput {
  # filtering
  filter: CallbackFilterInput
  sort: CallbackSortInput
  search: String
  _id: String

  # backwards-compatibility
  selector: CallbackSelectorUniqueInput

}

type SingleCallbackOutput{
  result: Callback
}

type MultiCallbackOutput{
  results: [Callback]
  totalCount: Int
}

type CallbackOutput{
  data: Callback
}

input CallbackFilterInput {
  _and: [CallbackFilterInput]
  _not: CallbackFilterInput
  _or: [CallbackFilterInput]


  name: String_Selector


  runs: String_Selector
  newSyntax: Boolean_Selector
  returns: String_Selector
  description: String_Selector

}

input CallbackSortInput {
  name: SortOptions
  iterator: SortOptions
  properties: SortOptions
  runs: SortOptions
  newSyntax: SortOptions
  returns: SortOptions
  description: SortOptions
  hooks: SortOptions
}

input CallbackSelectorInput {
  _and: [CallbackSelectorInput]
  _or: [CallbackSelectorInput]

}

input CallbackSelectorUniqueInput {
  _id: String
  documentId: String # OpenCRUD backwards compatibility
  slug: String

}


# Type for Votes
type Vote {
  _id: String 
  documentId: String 
  collectionName: String 
  userId: String 
  voteType: String 
  power: Float 
  votedAt: Date 
}


input DeleteVoteInput{
  filter: VoteFilterInput
  selector: VoteSelectorUniqueInput
}

input SingleVoteInput {
  # filtering
  filter: VoteFilterInput
  orderBy: VoteSortInput
  search: String
  _id: String

  # backwards-compatibility
  selector: VoteSelectorUniqueInput

  # options
  # Whether to enable caching for this query
  enableCache: Boolean
  # Return null instead of throwing MissingDocumentError
  allowNull: Boolean
}

input MultiVoteInput {

  # filtering
  filter: VoteFilterInput
  sort: VoteSortInput
  search: String
  offset: Int
  limit: Int

  # backwards-compatibility
  # A JSON object that contains the query terms used to fetch data
  terms: JSON

  # options
  # Whether to enable caching for this query
  enableCache: Boolean
  # Whether to calculate totalCount for this query
  enableTotal: Boolean
  
}

input MutationVoteInput {
  # filtering
  filter: VoteFilterInput
  sort: VoteSortInput
  search: String
  _id: String

  # backwards-compatibility
  selector: VoteSelectorUniqueInput

}

type SingleVoteOutput{
  result: Vote
}

type MultiVoteOutput{
  results: [Vote]
  totalCount: Int
}

type VoteOutput{
  data: Vote
}

input VoteFilterInput {
  _and: [VoteFilterInput]
  _not: VoteFilterInput
  _or: [VoteFilterInput]


  _id: String_Selector
  documentId: String_Selector
  collectionName: String_Selector
  userId: String_Selector
  voteType: String_Selector
  power: Float_Selector
  votedAt: Date_Selector
}

input VoteSortInput {
  _id: SortOptions
  documentId: SortOptions
  collectionName: SortOptions
  userId: SortOptions
  voteType: SortOptions
  power: SortOptions
  votedAt: SortOptions
}

input VoteSelectorInput {
  _and: [VoteSelectorInput]
  _or: [VoteSelectorInput]

}

input VoteSelectorUniqueInput {
  _id: String
  documentId: String # OpenCRUD backwards compatibility
  slug: String

}


# Type for Posts
type Post {
  _id: String 
  createdAt: Date 
  url: String 
  title: String 
  slug: String 
  body: String 
  htmlBody: String 
  excerpt: String 
  viewCount: Float 
  lastCommentedAt: Date 
  clickCount: Float 
  status: Float 
  postedAt: Date 
  postedAtFormatted: String 
  sticky: Boolean 
  userIP: String 
  userAgent: String 
  referrer: String 
  userId: String 
  user: User 
  categoriesIds: [String] 
  categories: [Category] 
  commentCount: Float 
  commentersIds: [String] 
  commenters: [User] 
  domain: String 
  pageUrl: String 
  linkUrl: String 
  comments(limit: Int = 5): [Comment] 
  emailShareUrl: String 
  twitterShareUrl: String 
  facebookShareUrl: String 
  currentUserVotes: [Vote] 
  allVotes: [Vote] 
  voters: [User] 
  baseScore: Float 
  score: Float 
}


input DeletePostInput{
  filter: PostFilterInput
  selector: PostSelectorUniqueInput
}

input SinglePostInput {
  # filtering
  filter: PostFilterInput
  orderBy: PostSortInput
  search: String
  _id: String

  # backwards-compatibility
  selector: PostSelectorUniqueInput

  # options
  # Whether to enable caching for this query
  enableCache: Boolean
  # Return null instead of throwing MissingDocumentError
  allowNull: Boolean
}

input MultiPostInput {

  # filtering
  filter: PostFilterInput
  sort: PostSortInput
  search: String
  offset: Int
  limit: Int

  # backwards-compatibility
  # A JSON object that contains the query terms used to fetch data
  terms: JSON

  # options
  # Whether to enable caching for this query
  enableCache: Boolean
  # Whether to calculate totalCount for this query
  enableTotal: Boolean
  
}

input MutationPostInput {
  # filtering
  filter: PostFilterInput
  sort: PostSortInput
  search: String
  _id: String

  # backwards-compatibility
  selector: PostSelectorUniqueInput

}

type SinglePostOutput{
  result: Post
}

type MultiPostOutput{
  results: [Post]
  totalCount: Int
}

type PostOutput{
  data: Post
}

input CreatePostInput {
  data: CreatePostDataInput!
}

input CreatePostDataInput {
  url: String 
  title: String 
  body: String 
  status: Float 
  postedAt: Date 
  sticky: Boolean 
  userId: String 
  categoriesIds: [String] 
}

input UpdatePostInput{
  filter: PostFilterInput
  selector: PostSelectorUniqueInput
  data: UpdatePostDataInput!
}

input UpsertPostInput{
  filter: PostFilterInput
  selector: PostSelectorUniqueInput
  data: UpdatePostDataInput!
}

input UpdatePostDataInput {
  url: String 
  title: String 
  body: String 
  status: Float 
  postedAt: Date 
  sticky: Boolean 
  categoriesIds: [String] 
}

input PostFilterInput {
  _and: [PostFilterInput]
  _not: PostFilterInput
  _or: [PostFilterInput]
  _byCategory: PostByCategoryFilterInput

  _id: String_Selector
  createdAt: Date_Selector
  url: String_Selector
  title: String_Selector
  slug: String_Selector
  body: String_Selector
  htmlBody: String_Selector
  excerpt: String_Selector
  viewCount: Float_Selector
  lastCommentedAt: Date_Selector
  clickCount: Float_Selector
  status: Float_Selector
  postedAt: Date_Selector
  sticky: Boolean_Selector
  userIP: String_Selector
  userAgent: String_Selector
  referrer: String_Selector
  userId: String_Selector

  commentCount: Float_Selector

  domain: String_Selector
  pageUrl: String_Selector
  linkUrl: String_Selector

  emailShareUrl: String_Selector
  twitterShareUrl: String_Selector
  facebookShareUrl: String_Selector



  baseScore: Float_Selector
  score: Float_Selector
}

input PostByCategoryFilterInput{
  slug: String
}

input PostSortInput {
  _id: SortOptions
  createdAt: SortOptions
  url: SortOptions
  title: SortOptions
  slug: SortOptions
  body: SortOptions
  htmlBody: SortOptions
  excerpt: SortOptions
  viewCount: SortOptions
  lastCommentedAt: SortOptions
  clickCount: SortOptions
  status: SortOptions
  postedAt: SortOptions
  sticky: SortOptions
  userIP: SortOptions
  userAgent: SortOptions
  referrer: SortOptions
  userId: SortOptions
  categoriesIds: SortOptions
  commentCount: SortOptions
  commentersIds: SortOptions
  domain: SortOptions
  pageUrl: SortOptions
  linkUrl: SortOptions
  comments: SortOptions
  emailShareUrl: SortOptions
  twitterShareUrl: SortOptions
  facebookShareUrl: SortOptions
  currentUserVotes: SortOptions
  allVotes: SortOptions
  voters: SortOptions
  baseScore: SortOptions
  score: SortOptions
}

input PostSelectorInput {
  _and: [PostSelectorInput]
  _or: [PostSelectorInput]

}

input PostSelectorUniqueInput {
  _id: String
  documentId: String # OpenCRUD backwards compatibility
  slug: String

}


# Type for Comments
type Comment {
  _id: String 
  parentCommentId: String 
  parentComment: Comment 
  topLevelCommentId: String 
  topLevelComment: Comment 
  createdAt: Date 
  postedAt: Date 
  body: String 
  htmlBody: String 
  author: String 
  postId: String 
  post: Post 
  userId: String 
  user: User 
  isDeleted: Boolean 
  userIP: String 
  userAgent: String 
  referrer: String 
  pagePath: String 
  pageUrl: String 
  currentUserVotes: [Vote] 
  allVotes: [Vote] 
  voters: [User] 
  baseScore: Float 
  score: Float 
}


input DeleteCommentInput{
  filter: CommentFilterInput
  selector: CommentSelectorUniqueInput
}

input SingleCommentInput {
  # filtering
  filter: CommentFilterInput
  orderBy: CommentSortInput
  search: String
  _id: String

  # backwards-compatibility
  selector: CommentSelectorUniqueInput

  # options
  # Whether to enable caching for this query
  enableCache: Boolean
  # Return null instead of throwing MissingDocumentError
  allowNull: Boolean
}

input MultiCommentInput {

  # filtering
  filter: CommentFilterInput
  sort: CommentSortInput
  search: String
  offset: Int
  limit: Int

  # backwards-compatibility
  # A JSON object that contains the query terms used to fetch data
  terms: JSON

  # options
  # Whether to enable caching for this query
  enableCache: Boolean
  # Whether to calculate totalCount for this query
  enableTotal: Boolean
  
}

input MutationCommentInput {
  # filtering
  filter: CommentFilterInput
  sort: CommentSortInput
  search: String
  _id: String

  # backwards-compatibility
  selector: CommentSelectorUniqueInput

}

type SingleCommentOutput{
  result: Comment
}

type MultiCommentOutput{
  results: [Comment]
  totalCount: Int
}

type CommentOutput{
  data: Comment
}

input CreateCommentInput {
  data: CreateCommentDataInput!
}

input CreateCommentDataInput {
  parentCommentId: String 
  topLevelCommentId: String 
  body: String 
  postId: String 
  userId: String 
}

input UpdateCommentInput{
  filter: CommentFilterInput
  selector: CommentSelectorUniqueInput
  data: UpdateCommentDataInput!
}

input UpsertCommentInput{
  filter: CommentFilterInput
  selector: CommentSelectorUniqueInput
  data: UpdateCommentDataInput!
}

input UpdateCommentDataInput {
  body: String 
}

input CommentFilterInput {
  _and: [CommentFilterInput]
  _not: CommentFilterInput
  _or: [CommentFilterInput]


  _id: String_Selector
  parentCommentId: String_Selector
  topLevelCommentId: String_Selector
  createdAt: Date_Selector
  postedAt: Date_Selector
  body: String_Selector
  htmlBody: String_Selector
  author: String_Selector
  postId: String_Selector
  userId: String_Selector
  isDeleted: Boolean_Selector
  userIP: String_Selector
  userAgent: String_Selector
  referrer: String_Selector
  pagePath: String_Selector
  pageUrl: String_Selector



  baseScore: Float_Selector
  score: Float_Selector
}

input CommentSortInput {
  _id: SortOptions
  parentCommentId: SortOptions
  topLevelCommentId: SortOptions
  createdAt: SortOptions
  postedAt: SortOptions
  body: SortOptions
  htmlBody: SortOptions
  author: SortOptions
  postId: SortOptions
  userId: SortOptions
  isDeleted: SortOptions
  userIP: SortOptions
  userAgent: SortOptions
  referrer: SortOptions
  pagePath: SortOptions
  pageUrl: SortOptions
  currentUserVotes: SortOptions
  allVotes: SortOptions
  voters: SortOptions
  baseScore: SortOptions
  score: SortOptions
}

input CommentSelectorInput {
  _and: [CommentSelectorInput]
  _or: [CommentSelectorInput]

}

input CommentSelectorUniqueInput {
  _id: String
  documentId: String # OpenCRUD backwards compatibility
  slug: String

}


# Type for Categories
type Category {
  _id: String 
  name: String 
  slug: String 
  pagePath: String 
  pageUrl: String 
}


input DeleteCategoryInput{
  filter: CategoryFilterInput
  selector: CategorySelectorUniqueInput
}

input SingleCategoryInput {
  # filtering
  filter: CategoryFilterInput
  orderBy: CategorySortInput
  search: String
  _id: String

  # backwards-compatibility
  selector: CategorySelectorUniqueInput

  # options
  # Whether to enable caching for this query
  enableCache: Boolean
  # Return null instead of throwing MissingDocumentError
  allowNull: Boolean
}

input MultiCategoryInput {

  # filtering
  filter: CategoryFilterInput
  sort: CategorySortInput
  search: String
  offset: Int
  limit: Int

  # backwards-compatibility
  # A JSON object that contains the query terms used to fetch data
  terms: JSON

  # options
  # Whether to enable caching for this query
  enableCache: Boolean
  # Whether to calculate totalCount for this query
  enableTotal: Boolean
  
}

input MutationCategoryInput {
  # filtering
  filter: CategoryFilterInput
  sort: CategorySortInput
  search: String
  _id: String

  # backwards-compatibility
  selector: CategorySelectorUniqueInput

}

type SingleCategoryOutput{
  result: Category
}

type MultiCategoryOutput{
  results: [Category]
  totalCount: Int
}

type CategoryOutput{
  data: Category
}

input CreateCategoryInput {
  data: CreateCategoryDataInput!
}

input CreateCategoryDataInput {
  name: String 
  slug: String 
}

input UpdateCategoryInput{
  filter: CategoryFilterInput
  selector: CategorySelectorUniqueInput
  data: UpdateCategoryDataInput!
}

input UpsertCategoryInput{
  filter: CategoryFilterInput
  selector: CategorySelectorUniqueInput
  data: UpdateCategoryDataInput!
}

input UpdateCategoryDataInput {
  name: String 
  slug: String 
}

input CategoryFilterInput {
  _and: [CategoryFilterInput]
  _not: CategoryFilterInput
  _or: [CategoryFilterInput]


  _id: String_Selector
  name: String_Selector
  slug: String_Selector
  pagePath: String_Selector
  pageUrl: String_Selector
}

input CategorySortInput {
  _id: SortOptions
  name: SortOptions
  slug: SortOptions
  pagePath: SortOptions
  pageUrl: SortOptions
}

input CategorySelectorInput {
  _and: [CategorySelectorInput]
  _or: [CategorySelectorInput]

}

input CategorySelectorUniqueInput {
  _id: String
  documentId: String # OpenCRUD backwards compatibility
  slug: String

}




type Query {
  SiteData: Site
  
  currentUser: User
  
  # A single User document fetched by ID or slug
  user(_id: String, input: SingleUserInput): SingleUserOutput
  
  # A list of User documents matching a set of query terms
  users(input: MultiUserInput): MultiUserOutput
  
  emails(input: MultiEmailInput): MultiEmailOutput
  
  settings(input: MultiSettingInput): MultiSettingOutput
  
  callbacks(input: MultiCallbackInput): MultiCallbackOutput
  
  # A single Vote document fetched by ID or slug
  vote(_id: String, input: SingleVoteInput): SingleVoteOutput
  
  # A list of Vote documents matching a set of query terms
  votes(input: MultiVoteInput): MultiVoteOutput
  
  # A single Post document fetched by ID or slug
  post(_id: String, input: SinglePostInput): SinglePostOutput
  
  # A list of Post documents matching a set of query terms
  posts(input: MultiPostInput): MultiPostOutput
  
  # A single Comment document fetched by ID or slug
  comment(_id: String, input: SingleCommentInput): SingleCommentOutput
  
  # A list of Comment documents matching a set of query terms
  comments(input: MultiCommentInput): MultiCommentOutput
  
  # A single Category document fetched by ID or slug
  category(_id: String, input: SingleCategoryInput): SingleCategoryOutput
  
  # A list of Category documents matching a set of query terms
  categories(input: MultiCategoryInput): MultiCategoryOutput
  
}
  

type Mutation {
  vote(documentId: String, voteType: String, collectionName: String, voteId: String) : Voteable

  getEmbedData(url: String) : JSON

  increasePostViewCount(postId: String): Float

  # Mutation for creating new User documents
  createUser(data: CreateUserDataInput!) : UserOutput

  # Mutation for updating a User document
  updateUser(input: MutationUserInput, _id: String, selector: UserSelectorUniqueInput, data: UpdateUserDataInput! ) : UserOutput

  # Mutation for upserting a User document
  upsertUser(input: MutationUserInput, _id: String, selector: UserSelectorUniqueInput, data: UpdateUserDataInput! ) : UserOutput

  # Mutation for deleting a User document
  deleteUser(input: MutationUserInput, _id: String, selector: UserSelectorUniqueInput) : UserOutput

  # Mutation for deleting a Vote document
  deleteVote(input: MutationVoteInput, _id: String, selector: VoteSelectorUniqueInput) : VoteOutput

  # Mutation for creating new Post documents
  createPost(data: CreatePostDataInput!) : PostOutput

  # Mutation for updating a Post document
  updatePost(input: MutationPostInput, _id: String, selector: PostSelectorUniqueInput, data: UpdatePostDataInput! ) : PostOutput

  # Mutation for upserting a Post document
  upsertPost(input: MutationPostInput, _id: String, selector: PostSelectorUniqueInput, data: UpdatePostDataInput! ) : PostOutput

  # Mutation for deleting a Post document
  deletePost(input: MutationPostInput, _id: String, selector: PostSelectorUniqueInput) : PostOutput

  # Mutation for creating new Comment documents
  createComment(data: CreateCommentDataInput!) : CommentOutput

  # Mutation for updating a Comment document
  updateComment(input: MutationCommentInput, _id: String, selector: CommentSelectorUniqueInput, data: UpdateCommentDataInput! ) : CommentOutput

  # Mutation for upserting a Comment document
  upsertComment(input: MutationCommentInput, _id: String, selector: CommentSelectorUniqueInput, data: UpdateCommentDataInput! ) : CommentOutput

  # Mutation for deleting a Comment document
  deleteComment(input: MutationCommentInput, _id: String, selector: CommentSelectorUniqueInput) : CommentOutput

  # Mutation for creating new Category documents
  createCategory(data: CreateCategoryDataInput!) : CategoryOutput

  # Mutation for updating a Category document
  updateCategory(input: MutationCategoryInput, _id: String, selector: CategorySelectorUniqueInput, data: UpdateCategoryDataInput! ) : CategoryOutput

  # Mutation for upserting a Category document
  upsertCategory(input: MutationCategoryInput, _id: String, selector: CategorySelectorUniqueInput, data: UpdateCategoryDataInput! ) : CategoryOutput

  # Mutation for deleting a Category document
  deleteCategory(input: MutationCategoryInput, _id: String, selector: CategorySelectorUniqueInput) : CategoryOutput

}


