
scalar JSON
scalar Date

# see https://docs.hasura.io/1.0/graphql/manual/queries/query-filters.html

input String_Selector {
  _eq: String
  #_gt: String
  #_gte: String
  #_ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  #_lt: String
  #_lte: String
  #_neq: String
  #_nilike: String
  #_nin: [String!]
  #_nlike: String
  #_nsimilar: String
  #_similar: String
}

input String_Array_Selector {
  _in: [String!]
  _contains: String
  # _contains_all: [String_Selector]
}

input Int_Selector {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  #_is_null: Boolean
  _lt: Int
  _lte: Int
  #_neq: Int
  #_nin: [Int!]
}

input Int_Array_Selector {
  contains: Int_Selector
  # contains_all: [Int_Selector]
}

input Float_Selector {
  _eq: Float
  _gt: Float
  _gte: Float
  _in: [Float!]
  #_is_null: Boolean
  _lt: Float
  _lte: Float
  #_neq: Float
  #_nin: [Float!]
}

input Float_Array_Selector {
  contains: Float_Selector
  # contains_all: [Float_Selector]
}

input Boolean_Selector {
  _eq: Boolean
  #_neq: Boolean
}

input Boolean_Array_Selector {
  contains: Boolean_Selector
  # contains_all: [Boolean_Selector]
}

input Date_Selector {
  _eq: Date
  _gt: Date
  _gte: Date
  _in: [Date!]
  #_is_null: Boolean
  _lt: Date
  _lte: Date
  #_neq: Date
  #_nin: [Date!]
}

input Date_Array_Selector {
  contains: Date_Selector
  # contains_all: [Date_Selector]
}

# column ordering options
enum SortOptions {
  asc
  desc
}

input OptionsInput {
  # Whether to enable caching for this query
  enableCache: Boolean
  # For single document queries, return null instead of throwing MissingDocumentError
  allowNull: Boolean
}

type Site {
  title: String
  url: String
  logoUrl: String
  sourceVersion: String
}
type IntlValue {
  locale: String
  value: String
}
input IntlValueInput{
  locale: String
  value: String
}
directive @intl on FIELD_DEFINITION

  input AuthPasswordInput {
    email: String
    password: String
  }
  type AuthResult {
    token: String
    userId: String
  }
  type LogoutResult {
    userId: String
  }

  input SignupInput {
    email: String
    password: String
  }
  type SignupResult {
    userId: String
  }

  input SetPasswordInput {
    newPassword: String
  }

  #type SetPasswordResult # Will auth user again so we reuse AuthResult atm

  input ResetPasswordInput {
    token: String
    newPassword: String
  }
  type ResetPasswordResult {
    userId: String
  }

  input VerifyEmailInput {
    token: String
  }
  type VerifyEmailResult {
    userId: String
  }

  input AuthEmailInput {
    email: String
  }


  type FSFile {
    _id: String
    name: String!
    extension: String
    extensionWithDot: String
    url(version: String = "original"): String
    meta: JSON
    type: String
    mime: String
    size: Int
    userId: String
    user: User
    isVideo: Boolean
    isAudio: Boolean
    isImage: Boolean
    isText: Boolean
    isJSON: Boolean
    isPDF: Boolean
  }


  # A file upload.
  scalar File


# A user object
type User {
  _id: String 
  username: String 
  emails: [JSON] 
  createdAt: Date 
  isAdmin: Boolean 
  locale: String 
  profile: JSON 
  services: JSON 
  displayName: String 
  email: String 
  emailHash: String 
  avatarUrl: String 
  slug: String 
  groups: [String] 
  pageUrl: String 
  pagePath: String 
  editUrl: String 
  uploadedFiles(collectionName: String): [UploadedFile] 
  createdAtFormatted(format: String = "YYYY/MM/DD"): String 
}


input DeleteUserInput{
  filter: UserFilterInput
  id: String
}

input SingleUserInput {
  # filtering
  filter: UserFilterInput
  sort: UserSortInput
  search: String
  id: String

  # backwards-compatibility
  "Deprecated (use 'filter/id' fields instead)."
  selector: UserSelectorUniqueInput

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Return null instead of throwing MissingDocumentError
  allowNull: Boolean
  # An identifier to name the query's execution context
  contextName: String
}

input MultiUserInput {

  # filtering
  filter: UserFilterInput
  sort: UserSortInput
  search: String
  offset: Int
  limit: Int

  # backwards-compatibility
  # A JSON object that contains the query terms used to fetch data
  "Deprecated (use 'filter/id' fields instead)."
  terms: JSON

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Whether to calculate totalCount for this query
  enableTotal: Boolean
  # An identifier to name the query's execution context
  contextName: String
  
}

type SingleUserOutput{
  result: User
}

type  MultiUserOutput{
  results: [User]
  totalCount: Int
}

type UserMutationOutput{
  data: User
}

input CreateUserInput {
  data: CreateUserDataInput!
  # An identifier to name the mutation's execution context
  contextName: String
}

input CreateUserDataInput {
  username: String 
  isAdmin: Boolean 
  locale: String 
  profile: JSON 
  displayName: String 
  email: String 
  groups: [String] 
  uploadedFiles: [JSON] 
}

input UpdateUserInput{
  filter: UserFilterInput
  id: String
  data: UpdateUserDataInput!
  # An identifier to name the mutation's execution context
  contextName: String
}

input UpsertUserInput{
  filter: UserFilterInput
  id: String
  data: UpdateUserDataInput!
  # An identifier to name the mutation's execution context
  contextName: String
}

input UpdateUserDataInput {
  username: String 
  isAdmin: Boolean 
  locale: String 
  displayName: String 
  email: String 
  groups: [String] 
  uploadedFiles: [JSON] 
}

input UserFilterInput {
  _and: [UserFilterInput]
  _not: UserFilterInput
  _or: [UserFilterInput]


  _id: String_Selector
  username: String_Selector

  createdAt: Date_Selector
  isAdmin: Boolean_Selector
  locale: String_Selector

  displayName: String_Selector
  email: String_Selector
  emailHash: String_Selector
  avatarUrl: String_Selector
  slug: String_Selector
  groups: String_Array_Selector
  pageUrl: String_Selector
  pagePath: String_Selector
  editUrl: String_Selector

}

input UserSortInput {
  _id: SortOptions
  username: SortOptions
  emails: SortOptions
  createdAt: SortOptions
  isAdmin: SortOptions
  locale: SortOptions
  services: SortOptions
  displayName: SortOptions
  email: SortOptions
  emailHash: SortOptions
  avatarUrl: SortOptions
  slug: SortOptions
  groups: SortOptions
  pageUrl: SortOptions
  pagePath: SortOptions
  editUrl: SortOptions
  uploadedFiles: SortOptions
}

input UserSelectorInput {
  _and: [UserSelectorInput]
  _or: [UserSelectorInput]

}

input UserSelectorUniqueInput {
  _id: String
  documentId: String # OpenCRUD backwards compatibility
  slug: String

}


# Type for UploadedFiles
type UploadedFile {
  _id: String 
  createdAt: Date 
  userId: String 
  user: User 
  documentId: String 
  collectionName: String 
  name: String 
  size: Float 
  type: String 
  duration: Float 
  videoHeight: Float 
  videoWidth: Float 
  height: Float 
  width: Float 
  previewUrl: String 
  createdAtFormatted(format: String = "YYYY/MM/DD"): String 
}


input DeleteUploadedFileInput{
  filter: UploadedFileFilterInput
  id: String
}

input SingleUploadedFileInput {
  # filtering
  filter: UploadedFileFilterInput
  sort: UploadedFileSortInput
  search: String
  id: String

  # backwards-compatibility
  "Deprecated (use 'filter/id' fields instead)."
  selector: UploadedFileSelectorUniqueInput

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Return null instead of throwing MissingDocumentError
  allowNull: Boolean
  # An identifier to name the query's execution context
  contextName: String
}

input MultiUploadedFileInput {

  # filtering
  filter: UploadedFileFilterInput
  sort: UploadedFileSortInput
  search: String
  offset: Int
  limit: Int

  # backwards-compatibility
  # A JSON object that contains the query terms used to fetch data
  "Deprecated (use 'filter/id' fields instead)."
  terms: JSON

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Whether to calculate totalCount for this query
  enableTotal: Boolean
  # An identifier to name the query's execution context
  contextName: String
  
}

type SingleUploadedFileOutput{
  result: UploadedFile
}

type  MultiUploadedFileOutput{
  results: [UploadedFile]
  totalCount: Int
}

type UploadedFileMutationOutput{
  data: UploadedFile
}

input CreateUploadedFileInput {
  data: CreateUploadedFileDataInput!
  # An identifier to name the mutation's execution context
  contextName: String
}

input CreateUploadedFileDataInput {
  userId: String 
  documentId: String 
  collectionName: String 
  name: String 
  size: Float 
  type: String 
  duration: Float 
  videoHeight: Float 
  videoWidth: Float 
  height: Float 
  width: Float 
  previewUrl: String 
}

input UpdateUploadedFileInput{
  filter: UploadedFileFilterInput
  id: String
  data: UpdateUploadedFileDataInput!
  # An identifier to name the mutation's execution context
  contextName: String
}

input UpsertUploadedFileInput{
  filter: UploadedFileFilterInput
  id: String
  data: UpdateUploadedFileDataInput!
  # An identifier to name the mutation's execution context
  contextName: String
}

input UpdateUploadedFileDataInput {
  userId: String 
  documentId: String 
  collectionName: String 
  name: String 
  size: Float 
  type: String 
  duration: Float 
  videoHeight: Float 
  videoWidth: Float 
  height: Float 
  width: Float 
  previewUrl: String 
}

input UploadedFileFilterInput {
  _and: [UploadedFileFilterInput]
  _not: UploadedFileFilterInput
  _or: [UploadedFileFilterInput]


  _id: String_Selector
  createdAt: Date_Selector
  userId: String_Selector
  documentId: String_Selector
  collectionName: String_Selector
  name: String_Selector
  size: Float_Selector
  type: String_Selector
  duration: Float_Selector
  videoHeight: Float_Selector
  videoWidth: Float_Selector
  height: Float_Selector
  width: Float_Selector
  previewUrl: String_Selector
}

input UploadedFileSortInput {
  _id: SortOptions
  createdAt: SortOptions
  userId: SortOptions
  documentId: SortOptions
  collectionName: SortOptions
  name: SortOptions
  size: SortOptions
  type: SortOptions
  duration: SortOptions
  videoHeight: SortOptions
  videoWidth: SortOptions
  height: SortOptions
  width: SortOptions
  previewUrl: SortOptions
}

input UploadedFileSelectorInput {
  _and: [UploadedFileSelectorInput]
  _or: [UploadedFileSelectorInput]

}

input UploadedFileSelectorUniqueInput {
  _id: String
  documentId: String # OpenCRUD backwards compatibility
  slug: String

}


# Type for Courses
type Course {
  _id: String 
  createdAt: Date 
  userId: String 
  user: User 
  title: String 
  slug: String 
  content: String 
  noteId: JSON 
  noteUrl: FSFile 
  createdAtFormatted(format: String = "YYYY/MM/DD"): String 
}


input DeleteCourseInput{
  filter: CourseFilterInput
  id: String
}

input SingleCourseInput {
  # filtering
  filter: CourseFilterInput
  sort: CourseSortInput
  search: String
  id: String

  # backwards-compatibility
  "Deprecated (use 'filter/id' fields instead)."
  selector: CourseSelectorUniqueInput

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Return null instead of throwing MissingDocumentError
  allowNull: Boolean
  # An identifier to name the query's execution context
  contextName: String
}

input MultiCourseInput {

  # filtering
  filter: CourseFilterInput
  sort: CourseSortInput
  search: String
  offset: Int
  limit: Int

  # backwards-compatibility
  # A JSON object that contains the query terms used to fetch data
  "Deprecated (use 'filter/id' fields instead)."
  terms: JSON

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Whether to calculate totalCount for this query
  enableTotal: Boolean
  # An identifier to name the query's execution context
  contextName: String
  
}

type SingleCourseOutput{
  result: Course
}

type  MultiCourseOutput{
  results: [Course]
  totalCount: Int
}

type CourseMutationOutput{
  data: Course
}

input CreateCourseInput {
  data: CreateCourseDataInput!
  # An identifier to name the mutation's execution context
  contextName: String
}

input CreateCourseDataInput {
  title: String 
  content: String 
  noteId: JSON 
}

input UpdateCourseInput{
  filter: CourseFilterInput
  id: String
  data: UpdateCourseDataInput!
  # An identifier to name the mutation's execution context
  contextName: String
}

input UpsertCourseInput{
  filter: CourseFilterInput
  id: String
  data: UpdateCourseDataInput!
  # An identifier to name the mutation's execution context
  contextName: String
}

input UpdateCourseDataInput {
  title: String 
  content: String 
  noteId: JSON 
}

input CourseFilterInput {
  _and: [CourseFilterInput]
  _not: CourseFilterInput
  _or: [CourseFilterInput]


  _id: String_Selector
  createdAt: Date_Selector
  userId: String_Selector
  title: String_Selector
  slug: String_Selector
  content: String_Selector

}

input CourseSortInput {
  _id: SortOptions
  createdAt: SortOptions
  userId: SortOptions
  title: SortOptions
  slug: SortOptions
  content: SortOptions
  noteId: SortOptions
}

input CourseSelectorInput {
  _and: [CourseSelectorInput]
  _or: [CourseSelectorInput]

}

input CourseSelectorUniqueInput {
  _id: String
  documentId: String # OpenCRUD backwards compatibility
  slug: String

}




type Query {
  siteData: Site
  
  currentUser: User
  
  # A single User document fetched by ID or slug
  user(input: SingleUserInput!): SingleUserOutput
  
  # A list of User documents matching a set of query terms
  users(input: MultiUserInput):  MultiUserOutput
  
  # A single UploadedFile document fetched by ID or slug
  uploadedFile(input: SingleUploadedFileInput!): SingleUploadedFileOutput
  
  # A list of UploadedFile documents matching a set of query terms
  uploadedFiles(input: MultiUploadedFileInput):  MultiUploadedFileOutput
  
  # A single Course document fetched by ID or slug
  course(input: SingleCourseInput!): SingleCourseOutput
  
  # A list of Course documents matching a set of query terms
  courses(input: MultiCourseInput):  MultiCourseOutput
  
}
  

type Mutation {
  authenticateWithPassword(input: AuthPasswordInput): AuthResult

  logout: LogoutResult

  signup(input: SignupInput): SignupResult

  setPassword(input: SetPasswordInput): AuthResult

  sendResetPasswordEmail(input: AuthEmailInput): Boolean

  resetPassword(input: ResetPasswordInput): ResetPasswordResult

  sendVerificationEmail(input: AuthEmailInput): Boolean

  verifyEmail(input: VerifyEmailInput): VerifyEmailResult

  # Mutation for creating new User documents
  createUser(
  input: CreateUserInput,
  "Deprecated (use 'input' field instead)."
  data: CreateUserDataInput
) : UserMutationOutput

  # Mutation for updating a User document
  updateUser(
  input: UpdateUserInput,
  "Deprecated (use 'input' field instead)."
  selector: UserSelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdateUserDataInput 
) : UserMutationOutput

  # Mutation for upserting a User document
  upsertUser(
  input: UpsertUserInput,
  "Deprecated (use 'input' field instead)."
  selector: UserSelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdateUserDataInput
) : UserMutationOutput

  # Mutation for deleting a User document
  deleteUser(
  input: DeleteUserInput,
  "Deprecated (use 'input' field instead)."
  selector: UserSelectorUniqueInput
) : UserMutationOutput

  # Mutation for creating new UploadedFile documents
  createUploadedFile(
  input: CreateUploadedFileInput,
  "Deprecated (use 'input' field instead)."
  data: CreateUploadedFileDataInput
) : UploadedFileMutationOutput

  # Mutation for updating a UploadedFile document
  updateUploadedFile(
  input: UpdateUploadedFileInput,
  "Deprecated (use 'input' field instead)."
  selector: UploadedFileSelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdateUploadedFileDataInput 
) : UploadedFileMutationOutput

  # Mutation for upserting a UploadedFile document
  upsertUploadedFile(
  input: UpsertUploadedFileInput,
  "Deprecated (use 'input' field instead)."
  selector: UploadedFileSelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdateUploadedFileDataInput
) : UploadedFileMutationOutput

  # Mutation for deleting a UploadedFile document
  deleteUploadedFile(
  input: DeleteUploadedFileInput,
  "Deprecated (use 'input' field instead)."
  selector: UploadedFileSelectorUniqueInput
) : UploadedFileMutationOutput

  # Mutation for creating new Course documents
  createCourse(
  input: CreateCourseInput,
  "Deprecated (use 'input' field instead)."
  data: CreateCourseDataInput
) : CourseMutationOutput

  # Mutation for updating a Course document
  updateCourse(
  input: UpdateCourseInput,
  "Deprecated (use 'input' field instead)."
  selector: CourseSelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdateCourseDataInput 
) : CourseMutationOutput

  # Mutation for upserting a Course document
  upsertCourse(
  input: UpsertCourseInput,
  "Deprecated (use 'input' field instead)."
  selector: CourseSelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdateCourseDataInput
) : CourseMutationOutput

  # Mutation for deleting a Course document
  deleteCourse(
  input: DeleteCourseInput,
  "Deprecated (use 'input' field instead)."
  selector: CourseSelectorUniqueInput
) : CourseMutationOutput

}


